Line: 0 Column: 0 Type: FnSign Value: fn
Line: 0 Column: 3 Type: Ident Value: main
Line: 0 Column: 7 Type: L_ParenSign Value: (
Line: 0 Column: 8 Type: R_ParenSign Value: )
Line: 0 Column: 10 Type: ArrowSign Value: ->
Line: 0 Column: 13 Type: Ident Value: void
Line: 0 Column: 18 Type: L_BraceSign Value: {
Line: 1 Column: 4 Type: LetSign Value: let
Line: 1 Column: 8 Type: Ident Value: x
Line: 1 Column: 9 Type: ColonSign Value: :
Line: 1 Column: 11 Type: Int Value: int
Line: 1 Column: 15 Type: AssignSign Value: =
Line: 1 Column: 20 Type: MinusSign Value: -
Line: 1 Column: 21 Type: Uint_Literal Value: 1
Line: 1 Column: 22 Type: SemicolonSign Value: ;
Line: 2 Column: 4 Type: LetSign Value: let
Line: 2 Column: 8 Type: Ident Value: y
Line: 2 Column: 9 Type: ColonSign Value: :
Line: 2 Column: 11 Type: Int Value: int
Line: 2 Column: 15 Type: AssignSign Value: =
Line: 2 Column: 17 Type: Uint_Literal Value: 2
Line: 2 Column: 18 Type: SemicolonSign Value: ;
Line: 3 Column: 4 Type: LetSign Value: let
Line: 3 Column: 8 Type: Ident Value: z
Line: 3 Column: 9 Type: ColonSign Value: :
Line: 3 Column: 11 Type: Int Value: int
Line: 3 Column: 14 Type: SemicolonSign Value: ;
Line: 4 Column: 4 Type: Ident Value: z
Line: 4 Column: 6 Type: AssignSign Value: =
Line: 4 Column: 8 Type: Ident Value: x
Line: 4 Column: 10 Type: PlusSign Value: +
Line: 4 Column: 12 Type: Ident Value: y
Line: 4 Column: 13 Type: SemicolonSign Value: ;
Line: 5 Column: 4 Type: Ident Value: putint
Line: 5 Column: 10 Type: L_ParenSign Value: (
Line: 5 Column: 11 Type: Ident Value: z
Line: 5 Column: 12 Type: R_ParenSign Value: )
Line: 5 Column: 13 Type: SemicolonSign Value: ;
Line: 6 Column: 0 Type: R_BraceSign Value: }
